generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  emailVerified DateTime?
  name          String?
  role          String    @default("user")
  projects      Project[]
  orders        Order[]
  assets        Asset[]   @relation("UserAssets")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Style {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   @unique
  prompt          String
  negativePrompt  String?
  examples        String[]
  sdModel         String
  cfgScale        Float    @default(7)
  steps           Int      @default(30)
  parameters      Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  projects        Project[]
}

// TODO(studio): Refactor this Project model into dedicated StudioProject/ProjectAsset/ProjectGeneration/ProjectSelection tables and add reference prompts + suggestion catalogs plus an order/outbox event log to support the guided studio workflow.
model Project {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  userId         String          @db.ObjectId
  user           User            @relation(fields: [userId], references: [id])
  title          String
  inputImageUrl  String
  styleId        String?         @db.ObjectId
  style          Style?          @relation(fields: [styleId], references: [id])
  promptText     String
  status         ProjectStatus   @default(DRAFT)
  productProvider Provider?
  productId       String?
  productVariantId String?
  productOptions  Json?
  previewCount    Int            @default(0)
  promptHints     Json?
  outputs        ProjectOutput[]
  orders         Order[]         @relation("ProjectOrders")
  jobs           Job[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum ProjectStatus {
  DRAFT
  GENERATING
  READY
  FAILED
}

model ProjectOutput {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id])
  url       String
  metadata  Json
  createdAt DateTime @default(now())
}

model Order {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  userId           String        @db.ObjectId
  user             User          @relation(fields: [userId], references: [id])
  projectId        String        @db.ObjectId
  project          Project       @relation("ProjectOrders", fields: [projectId], references: [id])
  provider         Provider
  providerOrderId  String?
  product          Json
  price            Float
  currency         String
  stripeSessionId  String        @unique
  status           OrderStatus   @default(CREATED)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

enum Provider {
  PRINTFUL
  PRINTIFY
  CLOUDPRINTER
}

enum OrderStatus {
  CREATED
  PAID
  SENT
  FULFILLED
  FAILED
}

model Job {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  type      JobType
  status    JobStatus @default(PENDING)
  attempts  Int       @default(0)
  maxAttempts Int     @default(3)
  lockedAt  DateTime?
  lockedUntil DateTime?
  lockedBy  String?
  availableAt DateTime @default(now())
  lastError Json?
  payload   Json
  result    Json?
  projectId String?   @db.ObjectId
  project   Project?  @relation(fields: [projectId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([type, status, availableAt])
  @@index([status, lockedUntil])
}

enum JobType {
  GENERATION
  MOCKUP
  FULFILLMENT
}

enum JobStatus {
  PENDING
  RUNNING
  DONE
  FAILED
}

model Asset {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId      String   @db.ObjectId
  owner        User     @relation("UserAssets", fields: [ownerId], references: [id])
  type         AssetType
  s3Key        String
  url          String
  width        Int
  height       Int
  dpi          Int
  colorProfile String?
  metadata     Json?
  createdAt    DateTime @default(now())
}

enum AssetType {
  INPUT
  OUTPUT
  MOCKUP
}

model RateLimitWindow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  count     Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expiresAt])
}
