/**
 * ============================================================================
 * PRINTIFY SDK - USAGE EXAMPLES
 * ============================================================================
 * 
 * This file demonstrates how to use the Printify SDK
 */

import { Printify } from "./index";

// Example environment variables (add to .env)
const PRINTIFY_API_TOKEN = process.env.PRINTIFY_API_TOKEN!;
const PRINTIFY_SHOP_ID = parseInt(process.env.PRINTIFY_SHOP_ID ?? "0", 10);

/**
 * Initialize the Printify client
 */
export function createPrintifyClient() {
  return new Printify({
    apiToken: PRINTIFY_API_TOKEN,
    shopId: PRINTIFY_SHOP_ID,
    userAgent: "Muzo/1.0",
  });
}

/**
 * Example: Explore the catalog
 */
export async function exploreCatalog() {
  const printify = createPrintifyClient();

  console.log("üìö Fetching blueprints...");
  const blueprints = await printify.catalog.getBlueprints();
  
  console.log(`Found ${blueprints.length} blueprints`);
  
  // Find popular products
  const mugs = blueprints.filter((b) => b.title.toLowerCase().includes("mug"));
  const tshirts = blueprints.filter((b) => b.title.toLowerCase().includes("t-shirt"));
  const posters = blueprints.filter((b) => b.title.toLowerCase().includes("poster"));

  console.log(`üìã Mugs: ${mugs.length}`);
  console.log(`üëï T-shirts: ${tshirts.length}`);
  console.log(`üñºÔ∏è  Posters: ${posters.length}`);

  return { blueprints, mugs, tshirts, posters };
}

/**
 * Example: Get variants for a specific blueprint
 */
export async function getProductVariants(blueprintId: number, printProviderId: number) {
  const printify = createPrintifyClient();

  console.log(`üîç Fetching variants for blueprint ${blueprintId}...`);
  
  // Get print providers for this blueprint
  const providers = await printify.catalog.getBlueprintPrintProviders(blueprintId);
  console.log(`Found ${providers.length} print providers`);

  // Get variants
  const variants = await printify.catalog.getVariants(blueprintId, printProviderId, {
    showOutOfStock: false, // Only show in-stock variants
  });

  console.log(`Found ${variants.length} variants`);

  // Group by color
  const colors = new Set(variants.map((v) => v.options.color).filter(Boolean));
  console.log(`Available colors: ${Array.from(colors).join(", ")}`);

  // Group by size
  const sizes = new Set(variants.map((v) => v.options.size).filter(Boolean));
  console.log(`Available sizes: ${Array.from(sizes).join(", ")}`);

  return variants;
}

/**
 * Example: Create a product with mockups
 */
export async function createProductWithMockups(params: {
  title: string;
  description: string;
  imageUrl: string;
  blueprintId: number;
  printProviderId: number;
  variantIds: number[];
  price: number;
}) {
  const printify = createPrintifyClient();

  console.log("üì§ Uploading image to Printify...");
  
  // Step 1: Upload the image
  const image = await printify.uploads.upload({
    file_name: "artwork.png",
    url: params.imageUrl,
  });

  console.log(`‚úÖ Image uploaded: ${image.id}`);
  console.log(`   Size: ${image.width}x${image.height}px`);

  // Step 2: Create the product
  console.log("üé® Creating product with mockups...");
  
  const product = await printify.products.create({
    title: params.title,
    description: params.description,
    blueprint_id: params.blueprintId,
    print_provider_id: params.printProviderId,
    variants: params.variantIds.map((id) => ({
      id,
      price: params.price, // Price in cents (e.g., 2000 = $20.00)
      is_enabled: true,
    })),
    print_areas: [
      {
        variant_ids: params.variantIds,
        placeholders: [
          {
            position: "front",
            images: [
              {
                id: image.id,
                x: 0.5, // Center horizontally
                y: 0.5, // Center vertically
                scale: 1, // Full width
                angle: 0, // No rotation
              },
            ],
          },
        ],
      },
    ],
  });

  console.log(`‚úÖ Product created: ${product.id}`);
  console.log(`   Title: ${product.title}`);
  console.log(`   Variants: ${product.variants.length}`);
  console.log(`   Mockups: ${product.images.length}`);

  // The mockups are automatically generated by Printify
  console.log("\nüì∏ Generated mockups:");
  product.images.forEach((img, i) => {
    console.log(`   ${i + 1}. ${img.position} - ${img.src}`);
    console.log(`      Variants: ${img.variant_ids.join(", ")}`);
  });

  return {
    product,
    image,
    mockups: product.images,
  };
}

/**
 * Example: Get shipping costs
 */
export async function getShippingCosts(blueprintId: number, printProviderId: number) {
  const printify = createPrintifyClient();

  console.log(`üì¶ Fetching shipping costs...`);
  
  const shipping = await printify.catalog.getShipping(blueprintId, printProviderId);

  console.log(`Handling time: ${shipping.handling_time.value} ${shipping.handling_time.unit}(s)`);
  console.log(`Shipping profiles: ${shipping.profiles.length}`);

  shipping.profiles.forEach((profile, i) => {
    console.log(`\nProfile ${i + 1}:`);
    console.log(`  Countries: ${profile.countries.join(", ")}`);
    console.log(`  First item: ${profile.first_item.cost / 100} ${profile.first_item.currency}`);
    console.log(
      `  Additional items: ${profile.additional_items.cost / 100} ${profile.additional_items.currency}`,
    );
    console.log(`  Applies to ${profile.variant_ids.length} variant(s)`);
  });

  return shipping;
}

/**
 * Example: Check rate limit status
 */
export function checkRateLimitStatus() {
  const printify = createPrintifyClient();
  const status = printify.getRateLimitStatus();

  console.log("\nüö¶ Rate Limit Status:");
  console.log(`   Global: ${status.globalRequests}/${status.globalLimit} requests used`);
  console.log(`   Catalog: ${status.catalogRequests}/${status.catalogLimit} requests used`);

  return status;
}

/**
 * Full workflow example
 */
export async function fullWorkflowExample() {
  try {
    console.log("üöÄ Starting Printify SDK workflow...\n");

    // 1. Explore catalog
    const { mugs } = await exploreCatalog();
    if (mugs.length === 0) {
      console.log("‚ùå No mugs found in catalog");
      return;
    }

    const mugBlueprint = mugs[0]!;
    console.log(`\n‚úÖ Selected blueprint: ${mugBlueprint.title} (ID: ${mugBlueprint.id})`);

    // 2. Get print providers
    const printify = createPrintifyClient();
    const providers = await printify.catalog.getBlueprintPrintProviders(mugBlueprint.id);
    
    if (providers.length === 0) {
      console.log("‚ùå No print providers found");
      return;
    }

    const provider = providers[0]!;
    console.log(`‚úÖ Selected provider: ${provider.title} (ID: ${provider.id})`);

    // 3. Get variants
    const variants = await getProductVariants(mugBlueprint.id, provider.id);
    
    if (variants.length === 0) {
      console.log("‚ùå No variants available");
      return;
    }

    // Select first 3 variants
    const selectedVariants = variants.slice(0, 3);
    console.log(`\n‚úÖ Selected ${selectedVariants.length} variants`);

    // 4. Get shipping costs
    await getShippingCosts(mugBlueprint.id, provider.id);

    // 5. Create product with mockups
    console.log("\n");
    const result = await createProductWithMockups({
      title: "Custom AI-Generated Mug",
      description: "Beautiful mug with AI-generated artwork",
      imageUrl: "https://picsum.photos/800/800", // Replace with actual image URL
      blueprintId: mugBlueprint.id,
      printProviderId: provider.id,
      variantIds: selectedVariants.map((v) => v.id),
      price: 2000, // $20.00
    });

    console.log("\n‚úÖ Workflow completed successfully!");
    console.log(`   Product ID: ${result.product.id}`);
    console.log(`   Mockup count: ${result.mockups.length}`);

    // 6. Check rate limits
    checkRateLimitStatus();

    return result;
  } catch (error) {
    console.error("\n‚ùå Error in workflow:", error);
    throw error;
  }
}

// Export for use in other files
export default {
  createPrintifyClient,
  exploreCatalog,
  getProductVariants,
  createProductWithMockups,
  getShippingCosts,
  checkRateLimitStatus,
  fullWorkflowExample,
};
